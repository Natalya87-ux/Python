{"name": "Test calculator functionality", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\n  (Session info: chrome=131.0.6778.265)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E2EA80D5+2992373]\n\t(No symbol) [0x00007FF6E2B3BFD0]\n\t(No symbol) [0x00007FF6E29D5739]\n\t(No symbol) [0x00007FF6E2A841E6]\n\t(No symbol) [0x00007FF6E2A4F36A]\n\t(No symbol) [0x00007FF6E2A6F584]\n\t(No symbol) [0x00007FF6E2A4F113]\n\t(No symbol) [0x00007FF6E2A1A918]\n\t(No symbol) [0x00007FF6E2A1BA81]\n\tGetHandleVerifier [0x00007FF6E2F06A2D+3379789]\n\tGetHandleVerifier [0x00007FF6E2F1C32D+3468109]\n\tGetHandleVerifier [0x00007FF6E2F10043+3418211]\n\tGetHandleVerifier [0x00007FF6E2C9C78B+847787]\n\t(No symbol) [0x00007FF6E2B4757F]\n\t(No symbol) [0x00007FF6E2B42FC4]\n\t(No symbol) [0x00007FF6E2B4315D]\n\t(No symbol) [0x00007FF6E2B32979]\n\tBaseThreadInitThunk [0x00007FF88A4C7374+20]\n\tRtlUserThreadStart [0x00007FF88C0BCC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b5aa0683456d793f74e87ee38686e78\")>\n\n    @allure.feature(\"Calculator\")\n    @allure.title(\"Test calculator functionality\")\n    @allure.description(\"Test the calculator's ability to perform a calculation with a specified delay\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_calculator(driver):\n        with allure.step(\"Set cookie policy\"):\n            calc = MainPageCalculator(driver)\n>           calc.set_cookie_policy()\n\ntest_CalcPage.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages\\MainPageСalculator.py:16: in set_cookie_policy\n    self._driver.add_cookie(cookie)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:673: in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028F025282F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid cookie domain\",\"message\":\"invalid cookie domain\\\\n  (Session info...07FF6E2B32979]\\\\n\\\\tBaseThreadInitThunk [0x00007FF88A4C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF88C0BCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\nE         (Session info: chrome=131.0.6778.265)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E2EA80D5+2992373]\nE       \t(No symbol) [0x00007FF6E2B3BFD0]\nE       \t(No symbol) [0x00007FF6E29D5739]\nE       \t(No symbol) [0x00007FF6E2A841E6]\nE       \t(No symbol) [0x00007FF6E2A4F36A]\nE       \t(No symbol) [0x00007FF6E2A6F584]\nE       \t(No symbol) [0x00007FF6E2A4F113]\nE       \t(No symbol) [0x00007FF6E2A1A918]\nE       \t(No symbol) [0x00007FF6E2A1BA81]\nE       \tGetHandleVerifier [0x00007FF6E2F06A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF6E2F1C32D+3468109]\nE       \tGetHandleVerifier [0x00007FF6E2F10043+3418211]\nE       \tGetHandleVerifier [0x00007FF6E2C9C78B+847787]\nE       \t(No symbol) [0x00007FF6E2B4757F]\nE       \t(No symbol) [0x00007FF6E2B42FC4]\nE       \t(No symbol) [0x00007FF6E2B4315D]\nE       \t(No symbol) [0x00007FF6E2B32979]\nE       \tBaseThreadInitThunk [0x00007FF88A4C7374+20]\nE       \tRtlUserThreadStart [0x00007FF88C0BCC91+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidCookieDomainException"}, "description": "Test the calculator's ability to perform a calculation with a specified delay", "steps": [{"name": "Set cookie policy", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\n  (Session info: chrome=131.0.6778.265)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E2EA80D5+2992373]\n\t(No symbol) [0x00007FF6E2B3BFD0]\n\t(No symbol) [0x00007FF6E29D5739]\n\t(No symbol) [0x00007FF6E2A841E6]\n\t(No symbol) [0x00007FF6E2A4F36A]\n\t(No symbol) [0x00007FF6E2A6F584]\n\t(No symbol) [0x00007FF6E2A4F113]\n\t(No symbol) [0x00007FF6E2A1A918]\n\t(No symbol) [0x00007FF6E2A1BA81]\n\tGetHandleVerifier [0x00007FF6E2F06A2D+3379789]\n\tGetHandleVerifier [0x00007FF6E2F1C32D+3468109]\n\tGetHandleVerifier [0x00007FF6E2F10043+3418211]\n\tGetHandleVerifier [0x00007FF6E2C9C78B+847787]\n\t(No symbol) [0x00007FF6E2B4757F]\n\t(No symbol) [0x00007FF6E2B42FC4]\n\t(No symbol) [0x00007FF6E2B4315D]\n\t(No symbol) [0x00007FF6E2B32979]\n\tBaseThreadInitThunk [0x00007FF88A4C7374+20]\n\tRtlUserThreadStart [0x00007FF88C0BCC91+33]\n\n", "trace": "  File \"c:\\Users\\Professional\\Desktop\\Python\\lesson_10\\test_CalcPage.py\", line 23, in test_calculator\n    calc.set_cookie_policy()\n    ~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Professional\\Desktop\\Python\\lesson_10\\Pages\\MainPageСalculator.py\", line 16, in set_cookie_policy\n    self._driver.add_cookie(cookie)\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^\n  File \"C:\\Users\\Professional\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 673, in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Professional\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\Professional\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1736667251490, "stop": 1736667251547}], "start": 1736667251490, "stop": 1736667251549, "uuid": "a9a90355-1ece-44bb-8f4c-e23b929af6ca", "historyId": "314c7bbff0053e4f12777e405f7691bb", "testCaseId": "314c7bbff0053e4f12777e405f7691bb", "fullName": "test_CalcPage#test_calculator", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Calculator"}, {"name": "suite", "value": "test_CalcPage"}, {"name": "host", "value": "User-PC"}, {"name": "thread", "value": "15444-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_CalcPage"}]}